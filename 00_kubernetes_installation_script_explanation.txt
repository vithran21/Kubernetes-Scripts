
Kubernetes Setup: Explanation of Each Step

Step 1: Disable Swap on All Nodes
---------------------------------
Command:
  swapoff -a
  sed -i '/ swap / s/^\(.*\)$/#/g' /etc/fstab

Why?
  - Kubernetes requires consistent memory availability, and swap can interfere with this by swapping memory pages.
  - Disabling swap ensures better performance and stability of the cluster.

Step 2: Enable IPv4 Packet Forwarding
-------------------------------------
Command:
  cat <<EOF | sudo tee /etc/sysctl.d/k8s.conf
  net.ipv4.ip_forward = 1
  EOF
  sudo sysctl --system

Why?
  - IPv4 forwarding allows network traffic between pods across nodes.
  - This is essential for container networking in Kubernetes to function.

Step 3: Verify IPv4 Packet Forwarding
-------------------------------------
Command:
  sysctl net.ipv4.ip_forward

Why?
  - Verifies that packet forwarding is enabled to avoid network communication issues.

Step 4: Install containerd
--------------------------
Command:
  - Add Dockerâ€™s GPG key and repository.
  - Install containerd.io and enable it as a service.

Why?
  - containerd is a lightweight container runtime used by Kubernetes to manage containers.
  - It offers better performance and is preferred for Kubernetes deployments.

Step 5: Install CNI Plugin
--------------------------
Command:
  wget https://github.com/containernetworking/plugins/releases/download/v1.4.0/cni-plugins-linux-amd64-v1.4.0.tgz
  mkdir -p /opt/cni/bin
  tar Cxzvf /opt/cni/bin cni-plugins-linux-amd64-v1.4.0.tgz

Why?
  - CNI (Container Network Interface) plugins enable pod communication within the cluster and with external networks.

Step 6: Forward IPv4 and Configure iptables
-------------------------------------------
Command:
  - Load necessary modules: overlay, br_netfilter.
  - Enable bridge-nf-call-iptables for bridge network traffic.

Why?
  - Ensures that network packet routing works correctly between containers and pods.

Step 7: Modify containerd Configuration for systemd Support
-----------------------------------------------------------
Command:
  - Configure /etc/containerd/config.toml to support systemd as the cgroup driver.

Why?
  - systemd cgroup driver is more compatible with Kubernetes and ensures smoother resource management.

Step 8: Restart containerd and Check the Status
-----------------------------------------------
Command:
  sudo systemctl restart containerd && systemctl status containerd

Why?
  - Restarting ensures the new configuration is applied.

Step 9: Install kubeadm, kubelet, and kubectl
--------------------------------------------
Command:
  sudo apt-get update
  sudo apt-get install -y kubelet kubeadm kubectl
  sudo apt-mark hold kubelet kubeadm kubectl

Why?
  - kubeadm: Bootstraps the cluster by setting up control plane components.
  - kubelet: Manages pods and communicates with the control plane.
  - kubectl: CLI tool to interact with the cluster.

Step 10: Initialize the Cluster and Install CNI (Master Node)
-------------------------------------------------------------
Command:
  sudo kubeadm init
  mkdir -p $HOME/.kube
  sudo cp -i /etc/kubernetes/admin.conf $HOME/.kube/config
  sudo chown $(id -u):$(id -g) $HOME/.kube/config
  kubectl apply -f https://reweave.azurewebsites.net/k8s/v1.30/net.yaml

Why?
  - kubeadm init: Sets up the master node.
  - Copying admin config allows kubectl to interact with the cluster.
  - Applying CNI YAML ensures proper networking for the pods.

Step 11: Join Worker Nodes to the Cluster
-----------------------------------------
Command:
  kubeadm join <MASTER_IP>:6443 --token <TOKEN> --discovery-token-ca-cert-hash <HASH>

Why?
  - Worker nodes connect to the master node using the generated join token.

Summary:
--------
These steps configure a Kubernetes cluster by:
1. Setting up the runtime (containerd) to manage containers.
2. Ensuring network forwarding and iptables rules for communication.
3. Installing essential tools (kubeadm, kubectl, kubelet) for cluster management.
4. Initializing the cluster on the master node and connecting worker nodes.

This configuration ensures a stable, working Kubernetes environment ready for deploying applications.
